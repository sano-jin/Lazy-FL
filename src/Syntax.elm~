module Syntax exposing (..)


type alias Program a   = [ ScDefn a ]
type alias CoreProgram = Program String

-- | A Supercombinator Definition contains the neame, its arguments and its body expression
type alias ScDefn     = (String, [ a ], Expr a)
type alias CoreScDefn = ScDefn String

type alias IsRec = Bool    
-- | The base data structure for the core language
type Expr a = EVar String              -- Variables
            | ENum Int                 -- Numbers
            | EConstr Int Int          -- Constructor tag arity
            | EAp (Expr a) (Expr a)    -- Applications
            | ELet                     -- Let (rec) expressions
              IsRec                    --    boolean with True = recursive 
              [ (a, Expr a) ]          --    Definitions
              (Expr a)                 --    Body of let (rec)
            | ECase                    -- Case expression
              (Expr a)                 --    Expression to scruntinise
              [ Alter a ]              --    Alternatives
            | ELam [ String ] (Expr a) -- Lambda abstraction

type alias CoreExpr  = Expr String

type alias Alter a   = (Int, [ String ], Expr a)
type alias CoreAlter = Alter String
    
                                  

    
